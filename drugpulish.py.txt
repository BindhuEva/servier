from pyspark.sql import SparkSession
from pyspark.sql.types import *
import pyspark.sql.functions as f
from pyspark.sql.functions import udf



@udf(returnType=StringType())
def checkdrug(drug_name,title):
    status = 'false'
    if drug_name .lower() in title.lower():
        status = 'true'
    return status


if __name__ == '__main__':
    spark = SparkSession.builder.master("local[*]").appName("Hive_ACID_warehouseconnector").enableHiveSupport().getOrCreate()
    drugs_df = spark.read.option("header","true").csv("data\\drugs.csv")

    #Same
    pubmed_df = spark.read.option("header","true").csv("data\\pubmed.csv").select('id','date','title','journal')
    trails_df = spark.read.option("header", "true").csv("data\\clinical_trials.csv").withColumnRenamed("scientific_title","title").select('id','date','title','journal')
    pubmed_json_df = spark.read.json("data\\pubmed.json").select('id','date','title','journal')

    master_df =  pubmed_df.union(trails_df).union(pubmed_json_df)
    #master_df.show()
    #A drug is considered mentioned in a PubMed article or clinical trial if it is mentioned in the title of the publication.

    #drug list
    drug_list = drugs_df.select('drug').rdd.flatMap(list).collect()
    drug_list = [drug.encode('utf-8') for drug in drug_list]

    formated_df = master_df.withColumn("drug_list",f.lit('|'.join(drug_list)))
    #formated_df.show(10,False)
    final_df  = formated_df.withColumn('drug_name',f.split(formated_df['drug_list'],'\\|')).drop('drug_list')

    #final_df.printSchema()
    final_df = final_df.select('id','date','title','journal',f.explode(f.col('drug_name')))
    final_df = final_df.withColumnRenamed('col', 'drug')
    final_df = final_df.withColumn('drug_status',checkdrug(final_df.drug,final_df.title)).where(f.col('drug_status')=='true')

    output_df =  final_df.select('drug','id','date','title','journal')
    output_df.repartition(1).write.json('output')